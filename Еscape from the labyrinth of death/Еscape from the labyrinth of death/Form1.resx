<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ADg//n/4P/5/+A==
</value>
  </data>
</root>